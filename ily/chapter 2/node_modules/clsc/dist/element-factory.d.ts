import React, { PropsWithChildren } from "react";
import { TemplateArgs } from "./template-string";
export declare type TWClassName<P> = string | TemplateStringsArray | TWClassNameCallback<P>;
declare type TWClassNameCallback<P> = (props: PropsWithChildren<P>) => string;
export declare function elementFactory<T extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> = React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>>(element: keyof JSX.IntrinsicElements): <P = {}>(twClassName: TWClassName<P>, ...args: TemplateArgs[]) => React.FC<T & P>;
export declare function elementFactory<T extends {} = {}>(element: React.FunctionComponent): <P = {}>(twClassName: TWClassName<P>, ...args: TemplateArgs[]) => React.FC<T & P>;
export default function elementFactory(element: any): (twClassName: any, ...args: any) => ({ children, className, ...props }: any) => React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
export declare type ComponentFactory<P = {}> = (twClassName: TWClassName<P>, ...args: TemplateArgs[]) => React.FC<P>;
export declare type ElementFactory<T extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> = React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>> = (element: keyof JSX.IntrinsicElements) => <P = {}>(twClassName: TWClassName<P>, ...args: TemplateArgs[]) => React.FC<T & P>;
export {};
